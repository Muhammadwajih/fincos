package pt.uc.dei.fincos.controller.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Map.Entry;

import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import pt.uc.dei.fincos.basic.EventType;
import pt.uc.dei.fincos.driver.Scheduler.ArrivalProcess;
import pt.uc.dei.fincos.driver.SyntheticWorkloadPhase;

public class SyntheticPhasePanel extends javax.swing.JPanel {

    private javax.swing.JPopupMenu schemaTablePopup;
    private final PhaseDetail owner;

    /** Creates new form SyntheticPhasePanel. */
    public SyntheticPhasePanel(PhaseDetail owner) {
        this.owner = owner;
        initComponents();
        addListeners();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        dataGenRadioGroup = new javax.swing.ButtonGroup();
        durationLabel2 = new javax.swing.JLabel();
        dataGenPanel = new javax.swing.JPanel();
        dataGenDSRadio = new javax.swing.JRadioButton();
        dataGenRTRadio = new javax.swing.JRadioButton();
        dataGenLabel = new javax.swing.JLabel();
        dataGenSeedCheck = new javax.swing.JCheckBox();
        dataGenSeedField = new javax.swing.JTextField();
        schemaLabel1 = new javax.swing.JLabel();
        finalRateTextField = new javax.swing.JTextField();
        durationLabel = new javax.swing.JLabel();
        rateLabel = new javax.swing.JLabel();
        durationTextField = new javax.swing.JTextField();
        initialRateTextField = new javax.swing.JTextField();
        initialRateLabel = new javax.swing.JLabel();
        finalRateLabel = new javax.swing.JLabel();
        poissonCheckBox = new javax.swing.JCheckBox();
        schemaScroll1 = new javax.swing.JScrollPane();
        schemaTable = new javax.swing.JTable();
        deterministicMixCheckBox = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        durationLabel2.setText("sec"); // NOI18N

        dataGenPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Generation Options"));

        dataGenRadioGroup.add(dataGenDSRadio);
        dataGenDSRadio.setText("Before test and save to data file");
        dataGenDSRadio.setToolTipText("Generate events to a data file before test starts. Events will be read from it during test.");

        dataGenRadioGroup.add(dataGenRTRadio);
        dataGenRTRadio.setSelected(true);
        dataGenRTRadio.setText("In runtime");
        dataGenRTRadio.setToolTipText("Generate events during load submission.");

        dataGenLabel.setText("Generate Events' Data:");

        dataGenSeedCheck.setText("Use a fixed seed:");
        dataGenSeedCheck.setToolTipText("Random number generation");

        dataGenSeedField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        javax.swing.GroupLayout dataGenPanelLayout = new javax.swing.GroupLayout(dataGenPanel);
        dataGenPanel.setLayout(dataGenPanelLayout);
        dataGenPanelLayout.setHorizontalGroup(
                dataGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(dataGenPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(dataGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(dataGenLabel)
                                .addGroup(dataGenPanelLayout.createSequentialGroup()
                                        .addComponent(dataGenRTRadio)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dataGenDSRadio)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(dataGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(dataGenSeedCheck)
                                                .addGroup(dataGenPanelLayout.createSequentialGroup()
                                                        .addGap(21, 21, 21)
                                                        .addComponent(dataGenSeedField, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addContainerGap())
        );
        dataGenPanelLayout.setVerticalGroup(
                dataGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(dataGenPanelLayout.createSequentialGroup()
                        .addGroup(dataGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(dataGenLabel)
                                .addComponent(dataGenSeedCheck))
                                .addGroup(dataGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(dataGenPanelLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(dataGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                                        .addComponent(dataGenRTRadio)
                                                        .addComponent(dataGenDSRadio)))
                                                        .addComponent(dataGenSeedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGap(24, 24, 24))
        );

        schemaLabel1.setText("Schema"); // NOI18N

        finalRateTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        finalRateTextField.setToolTipText("Final event submission rate, in events per second"); // NOI18N
        finalRateTextField.setPreferredSize(new java.awt.Dimension(75, 20));

        durationLabel.setText("Duration"); // NOI18N

        rateLabel.setText("events/sec"); // NOI18N

        durationTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        durationTextField.setToolTipText("Phase duration in seconds"); // NOI18N
        durationTextField.setPreferredSize(new java.awt.Dimension(75, 20));

        initialRateTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        initialRateTextField.setToolTipText("Initial event submission rate, in events per second"); // NOI18N
        initialRateTextField.setPreferredSize(new java.awt.Dimension(75, 20));

        initialRateLabel.setText("Initial Rate"); // NOI18N

        finalRateLabel.setText("Final Rate"); // NOI18N

        poissonCheckBox.setText("Poisson process");
        poissonCheckBox.setToolTipText("Indicates if event arrivals follow a Poisson process");

        schemaTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null}
                },
                new String [] {
                        "Type", "Columns", "Mix"
                }
        ) {
            Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                    false, false, true
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        schemaTable.setMaximumSize(new java.awt.Dimension(150, 16));
        schemaScroll1.setViewportView(schemaTable);

        deterministicMixCheckBox.setText("Deterministic Mix (all types have the same frequency)");
        deterministicMixCheckBox.setToolTipText("Event types are generated in a predictable and repeatable order.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(deterministicMixCheckBox)
                                .addComponent(schemaScroll1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(durationTextField, 0, 0, Short.MAX_VALUE)
                                                .addComponent(durationLabel))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(durationLabel2)
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(initialRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(initialRateLabel))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addComponent(finalRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(rateLabel)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                        .addComponent(poissonCheckBox))
                                                                        .addComponent(finalRateLabel)))
                                                                        .addComponent(schemaLabel1)
                                                                        .addComponent(dataGenPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                        .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(durationLabel)
                                .addComponent(initialRateLabel)
                                .addComponent(finalRateLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(durationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(durationLabel2)
                                        .addComponent(initialRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(finalRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(rateLabel)
                                        .addComponent(poissonCheckBox))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(schemaLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(schemaScroll1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(deterministicMixCheckBox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                                        .addComponent(dataGenPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(11, 11, 11))
        );
    }// </editor-fold>


    private void addListeners() {
        schemaTablePopup = new javax.swing.JPopupMenu();

        schemaTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        schemaTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        schemaTable.getColumnModel().getColumn(2).setPreferredWidth(30);

        schemaTable.addMouseListener(new PopupListener(schemaTablePopup));
        JMenuItem addPhaseMenuItem = new JMenuItem("Add...");
        JMenuItem deletePhaseMenuItem = new JMenuItem("Delete");

        addPhaseMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                owner.openTypeDetail(null);
            }
        });

        deletePhaseMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int index = schemaTable.getSelectedRow();

                if (index > -1 && index < owner.syntheticTypes.size()) {
                    owner.syntheticTypes.remove(index);
                    ((DefaultTableModel) schemaTable.getModel()).removeRow(index);
                } else {
                    JOptionPane.showMessageDialog(null, "Select a type to delete");
                }
            }
        });

        schemaTablePopup.add(addPhaseMenuItem);
        schemaTablePopup.add(deletePhaseMenuItem);

        schemaTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    JTable source = (JTable) e.getSource();
                    if (source.isEnabled()) {
                        int selected = source.getSelectedRow();
                        if (selected > -1 && selected < owner.syntheticTypes.size()) {
                            owner.openTypeDetail(owner.syntheticTypes.get(selected));
                        }
                    }
                }
            }
        });

        dataGenSeedCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataGenSeedField.setEnabled(dataGenSeedCheck.isSelected());
            }
        });
    }

    /**
     * Fills the UI with the parameters of the workload phase.
     *
     * @param phase workload parameters
     */
    public void fillProperties(SyntheticWorkloadPhase phase) {
        durationTextField.setText(phase.getDuration() + "");
        initialRateTextField.setText(phase.getInitialRate() + "");
        finalRateTextField.setText(phase.getFinalRate() + "");

        poissonCheckBox.setSelected(phase.getArrivalProcess() == ArrivalProcess.POISSON);

        DefaultTableModel model = (DefaultTableModel) schemaTable.getModel();
        int rowCount = model.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            model.removeRow(0);
        }
        if (phase.getSchema() != null) {
            for (Entry<EventType, Double> e : phase.getSchema().entrySet()) {
                owner.syntheticTypes.add(e.getKey());
                ((DefaultTableModel) schemaTable.getModel()).addRow(
                        new Object[] {e.getKey().getName(), e.getKey().getAttributesNamesList(), ""+e.getValue()});
            }

            ((DefaultTableModel) schemaTable.getModel()).addRow(new Object[] {null, null});
        }

        deterministicMixCheckBox.setSelected(phase.isDeterministicEventMix());

        if (phase.getDataGenMode() == SyntheticWorkloadPhase.RUNTIME) {
            dataGenRTRadio.setSelected(true);
        } else if (phase.getDataGenMode() == SyntheticWorkloadPhase.DATASET) {
            dataGenDSRadio.setSelected(true);
        }
        if (phase.getRandomSeed() != null) {
            dataGenSeedCheck.setSelected(true);
            dataGenSeedField.setText("" + phase.getRandomSeed());
        }

        this.validate();
        this.repaint();
    }

    // Variables declaration - do not modify
    protected javax.swing.JRadioButton dataGenDSRadio;
    private javax.swing.JLabel dataGenLabel;
    private javax.swing.JPanel dataGenPanel;
    private javax.swing.ButtonGroup dataGenRadioGroup;
    protected javax.swing.JRadioButton dataGenRTRadio;
    protected javax.swing.JCheckBox dataGenSeedCheck;
    protected javax.swing.JTextField dataGenSeedField;
    protected javax.swing.JCheckBox deterministicMixCheckBox;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JLabel durationLabel2;
    protected javax.swing.JTextField durationTextField;
    private javax.swing.JLabel finalRateLabel;
    protected javax.swing.JTextField finalRateTextField;
    private javax.swing.JLabel initialRateLabel;
    protected javax.swing.JTextField initialRateTextField;
    protected javax.swing.JCheckBox poissonCheckBox;
    private javax.swing.JLabel rateLabel;
    private javax.swing.JLabel schemaLabel1;
    private javax.swing.JScrollPane schemaScroll1;
    protected javax.swing.JTable schemaTable;
    // End of variables declaration
}
