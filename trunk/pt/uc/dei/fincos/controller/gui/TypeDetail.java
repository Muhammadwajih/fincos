/*
 * TypeDetail.java
 *
 * Created on 28 de Junho de 2008, 12:19
 */

package pt.uc.dei.fincos.controller.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import pt.uc.dei.fincos.basic.Attribute;
import pt.uc.dei.fincos.basic.EventType;



/**
 *
 * @author Marcelo R.N. Mendes
 */
@SuppressWarnings("serial")
public class TypeDetail extends ComponentDetail {
    
    private ArrayList<Attribute> columns = new ArrayList<Attribute>();
    private PhaseDetail parent;
    private EventType oldType;
    
    private Long dataGenSeed;
    
	/** Creates new form TypeDetail */
    public TypeDetail(PhaseDetail parent, EventType type, Long dataGenSeed) {
        initComponents();
        
        if(type != null) {
        	this.oldType = type;     
        	this.op = EDIT;        
        	fillProperties(type);
        }	
        else {        	        	
        	this.op = INSERT;
        	setTitle("New Event Type");
        }
        
        this.parent = parent;        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents    
	private void initComponents() {
//================================= GENERATED CODE ==========================================
    	columnsTablePopup = new javax.swing.JPopupMenu();
        jLabel1 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        cancelBtn = new javax.swing.JButton();
        okBtn = new javax.swing.JButton();
        schemaScroll = new javax.swing.JScrollPane();
        columnsTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Event Type Detail");

        jLabel1.setText("Name");

        cancelBtn.setText("Cancel");
        cancelBtn.setPreferredSize(null);               

        okBtn.setText("OK");
        okBtn.setPreferredSize(null);
        
        columnsTable.setModel(new javax.swing.table.DefaultTableModel(
            new String [] {
                "Name", "Type", "Domain"
            }, 1
        ) {
            @SuppressWarnings("unchecked")
			Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            @SuppressWarnings("unchecked")
			public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        columnsTable.setMaximumSize(new java.awt.Dimension(150, 16));
        schemaScroll.setViewportView(columnsTable);
        
        jLabel2.setText("Columns");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(180, 180, 180))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(schemaScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                                .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(okBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(schemaScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(cancelBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        
      //==============================  END OF GENERATED CODE =======================================
        
        

      //==============================  EVENT HANDLING CODE =========================================
        cancelBtn.setIcon(new ImageIcon("imgs/Cancel.png"));
        cancelBtn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {		
				dispose();
			}
        	
        });
        okBtn.setIcon(new ImageIcon("imgs/OK.png"));
        okBtn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					if(validateFields()) {
						String typeName = nameField.getText();
						Attribute atts[] = new Attribute[columns.size()];
						atts = columns.toArray(atts);
						EventType newType = new EventType(typeName, atts);
									
						switch (op) {
						case EDIT:							
							parent.updateEventType(oldType, newType);
							dispose();
							break;
						case INSERT:							
							parent.addEventType(newType);
							dispose();
						}	
					}
					else {
						JOptionPane.showMessageDialog(null, "One or more required fields were not correctly filled.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
					}
				} catch (Exception exc) {
					JOptionPane.showMessageDialog(null, exc.getMessage());
				}				
			}
      
        });       
        
        columnsTable.addMouseListener(new PopupListener(columnsTablePopup));
        JMenuItem addColMenuItem = new JMenuItem("Add...");
        JMenuItem deleteColMenuItem = new JMenuItem("Delete");
        JMenuItem copyOneColMenuItem = new JMenuItem("Make one copy");
        JMenuItem copyManyColsMenuItem = new JMenuItem("Make multiple copies...");
        
        addColMenuItem.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				openColumnDetail(null);				
			}			
		});
        
        deleteColMenuItem.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				int indexes[] = columnsTable.getSelectedRows();
				
				if(indexes.length > 0) {
					int count=0;			
					for (int i : indexes) {
						columns.remove(i-count);
						((DefaultTableModel)columnsTable.getModel()).removeRow(i-count);
						count++;
					}								
				}
				else {
					JOptionPane.showMessageDialog(null, "Select a column to delete");
				}				
			}			
		});
        
        copyOneColMenuItem.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {				
				int indexes[] = columnsTable.getSelectedRows();						
				if(indexes.length > 0) {
					Attribute original, copy;
					ArrayList<Attribute> toAdd = new ArrayList<Attribute>(indexes.length);
					for (int i : indexes) {
						original = columns.get(i);
						copy = (Attribute) original.clone();
						copy.setName(copy.getName()+"_copy");
						toAdd.add(copy);
					}
					
					for (Attribute attribute : toAdd) {
						addColumn(attribute);
					}
				}					
				else
					JOptionPane.showMessageDialog(null, "Select at least one column to copy");				
			}			
		});
        
        copyManyColsMenuItem.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {				
				int indexes[] = columnsTable.getSelectedRows();						
				if(indexes.length > 0) {
					int numCopies = 0;
					String input=JOptionPane.showInputDialog(null, "Number of Copies", "2");
					try {
						if(input != null) {
							numCopies = Integer.parseInt(input);	
						}
						else
							return;
							
					} catch (Exception e2) {
						JOptionPane.showMessageDialog(null, "Invalid number");
						return;
					}
					 
					Attribute original, copy;
					ArrayList<Attribute> toAdd = new ArrayList<Attribute>(indexes.length);
					for (int i = 1; i <= numCopies; i++) {
						for (int index : indexes) {
							original = columns.get(index);
							copy = (Attribute) original.clone();
							copy.setName(copy.getName()+"_copy_"+i);
							toAdd.add(copy);
						}
					}
					
					
					for (Attribute attribute : toAdd) {
						addColumn(attribute);
					}
				}					
				else
					JOptionPane.showMessageDialog(null, "Select at least one column to copy");				
			}			
		});
        
        columnsTablePopup.add(addColMenuItem);
        columnsTablePopup.add(deleteColMenuItem);
        columnsTablePopup.add(copyOneColMenuItem);
        columnsTablePopup.add(copyManyColsMenuItem);
        
        columnsTable.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) {
				if (e.getClickCount() == 2) {
					JTable source = (JTable)e.getSource();
					if(source.isEnabled()) {
						int selected = source.getSelectedRow();
						if(selected > -1 && selected < columns.size())
							openColumnDetail(columns.get(selected));							
					}					
				}}	
		});
        
        
        this.setResizable(false);
        this.setLocationRelativeTo(null); //screen center
        this.setVisible(true);
    }
        
    
    public boolean validateFields() {
    	if(nameField.getText() == null || nameField.getText().isEmpty())
    		return false;
    	    	
		return columnsTable.getRowCount() > 1;    	
    }
    
    public void fillProperties(EventType type) {
		this.nameField.setText(type.getName());
		
		Attribute atts[] = type.getAttributes();
		DefaultTableModel model = (DefaultTableModel) columnsTable.getModel();
		
		int rowCount = model.getRowCount();		
		for (int i = 0; i < rowCount; i++) {
			model.removeRow(0);
		}
		
		for (int i = 0; i < atts.length; i++) {
			this.columns .add(atts[i]);
			model.addRow(new Object[] {atts[i].getName(), atts[i].getType(), atts[i].getDomain()});
		}
		
		model.addRow(new Object[] {null, null, null});
	}
    
    public void updateColumn(Attribute oldColumn, Attribute newColumn) {    	
		int index = this.columns.indexOf(oldColumn);	
		
		if(index > -1) {
			removeColumn(index);
			addColumn(index, newColumn);				
		}		
	}

	public void addColumn(int index, Attribute newColumn) {
		this.columns.add(index,newColumn);				
		((DefaultTableModel)this.columnsTable.getModel()).insertRow(index, new Object[] {newColumn.getName(), newColumn.getType(), newColumn.getDomain()});
	}
	
	public void addColumn(Attribute newColumn) {			
		this.columns.add(newColumn);
		DefaultTableModel model = ((DefaultTableModel)this.columnsTable.getModel());
		model.insertRow(model.getRowCount()-1, new Object[] {newColumn.getName(), newColumn.getType(), newColumn.getDomain()});
	}

    private void removeColumn(int index) {    	
    	this.columns.remove(index);						
		((DefaultTableModel)columnsTable.getModel()).removeRow(index);
	}

    
    protected ColumnDetail openColumnDetail(Attribute att) {
    	return new ColumnDetail(this, att, this.dataGenSeed);
	}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField nameField;
    private javax.swing.JButton okBtn;
    private javax.swing.JScrollPane schemaScroll;
    private javax.swing.JTable columnsTable;
    private javax.swing.JPopupMenu columnsTablePopup;
    // End of variables declaration//GEN-END:variables
    
}
